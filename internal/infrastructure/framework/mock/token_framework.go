// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	domain "github.com/abc-valera/flugo-api/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// TokenFramework is an autogenerated mock type for the TokenFramework type
type TokenFramework struct {
	mock.Mock
}

type TokenFramework_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenFramework) EXPECT() *TokenFramework_Expecter {
	return &TokenFramework_Expecter{mock: &_m.Mock}
}

// CreateAccessToken provides a mock function with given fields: username
func (_m *TokenFramework) CreateAccessToken(username string) (string, *domain.Payload, error) {
	ret := _m.Called(username)

	var r0 string
	var r1 *domain.Payload
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, *domain.Payload, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.Payload); ok {
		r1 = rf(username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Payload)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TokenFramework_CreateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessToken'
type TokenFramework_CreateAccessToken_Call struct {
	*mock.Call
}

// CreateAccessToken is a helper method to define mock.On call
//   - username string
func (_e *TokenFramework_Expecter) CreateAccessToken(username interface{}) *TokenFramework_CreateAccessToken_Call {
	return &TokenFramework_CreateAccessToken_Call{Call: _e.mock.On("CreateAccessToken", username)}
}

func (_c *TokenFramework_CreateAccessToken_Call) Run(run func(username string)) *TokenFramework_CreateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenFramework_CreateAccessToken_Call) Return(_a0 string, _a1 *domain.Payload, _a2 error) *TokenFramework_CreateAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TokenFramework_CreateAccessToken_Call) RunAndReturn(run func(string) (string, *domain.Payload, error)) *TokenFramework_CreateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function with given fields: username
func (_m *TokenFramework) CreateRefreshToken(username string) (string, *domain.Payload, error) {
	ret := _m.Called(username)

	var r0 string
	var r1 *domain.Payload
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, *domain.Payload, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.Payload); ok {
		r1 = rf(username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Payload)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TokenFramework_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type TokenFramework_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - username string
func (_e *TokenFramework_Expecter) CreateRefreshToken(username interface{}) *TokenFramework_CreateRefreshToken_Call {
	return &TokenFramework_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", username)}
}

func (_c *TokenFramework_CreateRefreshToken_Call) Run(run func(username string)) *TokenFramework_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenFramework_CreateRefreshToken_Call) Return(_a0 string, _a1 *domain.Payload, _a2 error) *TokenFramework_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TokenFramework_CreateRefreshToken_Call) RunAndReturn(run func(string) (string, *domain.Payload, error)) *TokenFramework_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: token
func (_m *TokenFramework) VerifyToken(token string) (*domain.Payload, error) {
	ret := _m.Called(token)

	var r0 *domain.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Payload, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Payload); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenFramework_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type TokenFramework_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - token string
func (_e *TokenFramework_Expecter) VerifyToken(token interface{}) *TokenFramework_VerifyToken_Call {
	return &TokenFramework_VerifyToken_Call{Call: _e.mock.On("VerifyToken", token)}
}

func (_c *TokenFramework_VerifyToken_Call) Run(run func(token string)) *TokenFramework_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenFramework_VerifyToken_Call) Return(_a0 *domain.Payload, _a1 error) *TokenFramework_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenFramework_VerifyToken_Call) RunAndReturn(run func(string) (*domain.Payload, error)) *TokenFramework_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTokenFramework interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenFramework creates a new instance of TokenFramework. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenFramework(t mockConstructorTestingTNewTokenFramework) *TokenFramework {
	mock := &TokenFramework{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
