// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	context "context"

	domain "github.com/abc-valera/flugo-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// LikeRepository is an autogenerated mock type for the LikeRepository type
type LikeRepository struct {
	mock.Mock
}

type LikeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LikeRepository) EXPECT() *LikeRepository_Expecter {
	return &LikeRepository_Expecter{mock: &_m.Mock}
}

// CalcLikesOfJoke provides a mock function with given fields: c, jokeID
func (_m *LikeRepository) CalcLikesOfJoke(c context.Context, jokeID int) (int, error) {
	ret := _m.Called(c, jokeID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(c, jokeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(c, jokeID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, jokeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeRepository_CalcLikesOfJoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalcLikesOfJoke'
type LikeRepository_CalcLikesOfJoke_Call struct {
	*mock.Call
}

// CalcLikesOfJoke is a helper method to define mock.On call
//   - c context.Context
//   - jokeID int
func (_e *LikeRepository_Expecter) CalcLikesOfJoke(c interface{}, jokeID interface{}) *LikeRepository_CalcLikesOfJoke_Call {
	return &LikeRepository_CalcLikesOfJoke_Call{Call: _e.mock.On("CalcLikesOfJoke", c, jokeID)}
}

func (_c *LikeRepository_CalcLikesOfJoke_Call) Run(run func(c context.Context, jokeID int)) *LikeRepository_CalcLikesOfJoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LikeRepository_CalcLikesOfJoke_Call) Return(_a0 int, _a1 error) *LikeRepository_CalcLikesOfJoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeRepository_CalcLikesOfJoke_Call) RunAndReturn(run func(context.Context, int) (int, error)) *LikeRepository_CalcLikesOfJoke_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLike provides a mock function with given fields: c, like
func (_m *LikeRepository) CreateLike(c context.Context, like *domain.Like) error {
	ret := _m.Called(c, like)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Like) error); ok {
		r0 = rf(c, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeRepository_CreateLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLike'
type LikeRepository_CreateLike_Call struct {
	*mock.Call
}

// CreateLike is a helper method to define mock.On call
//   - c context.Context
//   - like *domain.Like
func (_e *LikeRepository_Expecter) CreateLike(c interface{}, like interface{}) *LikeRepository_CreateLike_Call {
	return &LikeRepository_CreateLike_Call{Call: _e.mock.On("CreateLike", c, like)}
}

func (_c *LikeRepository_CreateLike_Call) Run(run func(c context.Context, like *domain.Like)) *LikeRepository_CreateLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Like))
	})
	return _c
}

func (_c *LikeRepository_CreateLike_Call) Return(_a0 error) *LikeRepository_CreateLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LikeRepository_CreateLike_Call) RunAndReturn(run func(context.Context, *domain.Like) error) *LikeRepository_CreateLike_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLike provides a mock function with given fields: c, username, jokeID
func (_m *LikeRepository) DeleteLike(c context.Context, username string, jokeID int) error {
	ret := _m.Called(c, username, jokeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(c, username, jokeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeRepository_DeleteLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLike'
type LikeRepository_DeleteLike_Call struct {
	*mock.Call
}

// DeleteLike is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - jokeID int
func (_e *LikeRepository_Expecter) DeleteLike(c interface{}, username interface{}, jokeID interface{}) *LikeRepository_DeleteLike_Call {
	return &LikeRepository_DeleteLike_Call{Call: _e.mock.On("DeleteLike", c, username, jokeID)}
}

func (_c *LikeRepository_DeleteLike_Call) Run(run func(c context.Context, username string, jokeID int)) *LikeRepository_DeleteLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *LikeRepository_DeleteLike_Call) Return(_a0 error) *LikeRepository_DeleteLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LikeRepository_DeleteLike_Call) RunAndReturn(run func(context.Context, string, int) error) *LikeRepository_DeleteLike_Call {
	_c.Call.Return(run)
	return _c
}

// GetJokesUserLiked provides a mock function with given fields: c, username, params
func (_m *LikeRepository) GetJokesUserLiked(c context.Context, username string, params *domain.SelectParams) (domain.Jokes, error) {
	ret := _m.Called(c, username, params)

	var r0 domain.Jokes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SelectParams) (domain.Jokes, error)); ok {
		return rf(c, username, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SelectParams) domain.Jokes); ok {
		r0 = rf(c, username, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Jokes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.SelectParams) error); ok {
		r1 = rf(c, username, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeRepository_GetJokesUserLiked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJokesUserLiked'
type LikeRepository_GetJokesUserLiked_Call struct {
	*mock.Call
}

// GetJokesUserLiked is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - params *domain.SelectParams
func (_e *LikeRepository_Expecter) GetJokesUserLiked(c interface{}, username interface{}, params interface{}) *LikeRepository_GetJokesUserLiked_Call {
	return &LikeRepository_GetJokesUserLiked_Call{Call: _e.mock.On("GetJokesUserLiked", c, username, params)}
}

func (_c *LikeRepository_GetJokesUserLiked_Call) Run(run func(c context.Context, username string, params *domain.SelectParams)) *LikeRepository_GetJokesUserLiked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.SelectParams))
	})
	return _c
}

func (_c *LikeRepository_GetJokesUserLiked_Call) Return(_a0 domain.Jokes, _a1 error) *LikeRepository_GetJokesUserLiked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeRepository_GetJokesUserLiked_Call) RunAndReturn(run func(context.Context, string, *domain.SelectParams) (domain.Jokes, error)) *LikeRepository_GetJokesUserLiked_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersWhoLikedJoke provides a mock function with given fields: c, jokeID, params
func (_m *LikeRepository) GetUsersWhoLikedJoke(c context.Context, jokeID int, params *domain.SelectParams) (domain.Users, error) {
	ret := _m.Called(c, jokeID, params)

	var r0 domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.SelectParams) (domain.Users, error)); ok {
		return rf(c, jokeID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.SelectParams) domain.Users); ok {
		r0 = rf(c, jokeID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *domain.SelectParams) error); ok {
		r1 = rf(c, jokeID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeRepository_GetUsersWhoLikedJoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersWhoLikedJoke'
type LikeRepository_GetUsersWhoLikedJoke_Call struct {
	*mock.Call
}

// GetUsersWhoLikedJoke is a helper method to define mock.On call
//   - c context.Context
//   - jokeID int
//   - params *domain.SelectParams
func (_e *LikeRepository_Expecter) GetUsersWhoLikedJoke(c interface{}, jokeID interface{}, params interface{}) *LikeRepository_GetUsersWhoLikedJoke_Call {
	return &LikeRepository_GetUsersWhoLikedJoke_Call{Call: _e.mock.On("GetUsersWhoLikedJoke", c, jokeID, params)}
}

func (_c *LikeRepository_GetUsersWhoLikedJoke_Call) Run(run func(c context.Context, jokeID int, params *domain.SelectParams)) *LikeRepository_GetUsersWhoLikedJoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.SelectParams))
	})
	return _c
}

func (_c *LikeRepository_GetUsersWhoLikedJoke_Call) Return(_a0 domain.Users, _a1 error) *LikeRepository_GetUsersWhoLikedJoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeRepository_GetUsersWhoLikedJoke_Call) RunAndReturn(run func(context.Context, int, *domain.SelectParams) (domain.Users, error)) *LikeRepository_GetUsersWhoLikedJoke_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLikeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLikeRepository creates a new instance of LikeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLikeRepository(t mockConstructorTestingTNewLikeRepository) *LikeRepository {
	mock := &LikeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
