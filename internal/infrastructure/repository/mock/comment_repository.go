// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	context "context"

	domain "github.com/abc-valera/flugo-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

type CommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentRepository) EXPECT() *CommentRepository_Expecter {
	return &CommentRepository_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: c, comment
func (_m *CommentRepository) CreateComment(c context.Context, comment *domain.Comment) error {
	ret := _m.Called(c, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) error); ok {
		r0 = rf(c, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentRepository_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type CommentRepository_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - c context.Context
//   - comment *domain.Comment
func (_e *CommentRepository_Expecter) CreateComment(c interface{}, comment interface{}) *CommentRepository_CreateComment_Call {
	return &CommentRepository_CreateComment_Call{Call: _e.mock.On("CreateComment", c, comment)}
}

func (_c *CommentRepository_CreateComment_Call) Run(run func(c context.Context, comment *domain.Comment)) *CommentRepository_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Comment))
	})
	return _c
}

func (_c *CommentRepository_CreateComment_Call) Return(_a0 error) *CommentRepository_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentRepository_CreateComment_Call) RunAndReturn(run func(context.Context, *domain.Comment) error) *CommentRepository_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: c, id
func (_m *CommentRepository) DeleteComment(c context.Context, id int) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentRepository_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type CommentRepository_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - c context.Context
//   - id int
func (_e *CommentRepository_Expecter) DeleteComment(c interface{}, id interface{}) *CommentRepository_DeleteComment_Call {
	return &CommentRepository_DeleteComment_Call{Call: _e.mock.On("DeleteComment", c, id)}
}

func (_c *CommentRepository_DeleteComment_Call) Run(run func(c context.Context, id int)) *CommentRepository_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CommentRepository_DeleteComment_Call) Return(_a0 error) *CommentRepository_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentRepository_DeleteComment_Call) RunAndReturn(run func(context.Context, int) error) *CommentRepository_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetComment provides a mock function with given fields: c, id
func (_m *CommentRepository) GetComment(c context.Context, id int) (*domain.Comment, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Comment, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Comment); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_GetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComment'
type CommentRepository_GetComment_Call struct {
	*mock.Call
}

// GetComment is a helper method to define mock.On call
//   - c context.Context
//   - id int
func (_e *CommentRepository_Expecter) GetComment(c interface{}, id interface{}) *CommentRepository_GetComment_Call {
	return &CommentRepository_GetComment_Call{Call: _e.mock.On("GetComment", c, id)}
}

func (_c *CommentRepository_GetComment_Call) Run(run func(c context.Context, id int)) *CommentRepository_GetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CommentRepository_GetComment_Call) Return(_a0 *domain.Comment, _a1 error) *CommentRepository_GetComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepository_GetComment_Call) RunAndReturn(run func(context.Context, int) (*domain.Comment, error)) *CommentRepository_GetComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsOfJoke provides a mock function with given fields: c, jokeID, params
func (_m *CommentRepository) GetCommentsOfJoke(c context.Context, jokeID int, params *domain.SelectParams) (domain.Comments, error) {
	ret := _m.Called(c, jokeID, params)

	var r0 domain.Comments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.SelectParams) (domain.Comments, error)); ok {
		return rf(c, jokeID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.SelectParams) domain.Comments); ok {
		r0 = rf(c, jokeID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Comments)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *domain.SelectParams) error); ok {
		r1 = rf(c, jokeID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_GetCommentsOfJoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsOfJoke'
type CommentRepository_GetCommentsOfJoke_Call struct {
	*mock.Call
}

// GetCommentsOfJoke is a helper method to define mock.On call
//   - c context.Context
//   - jokeID int
//   - params *domain.SelectParams
func (_e *CommentRepository_Expecter) GetCommentsOfJoke(c interface{}, jokeID interface{}, params interface{}) *CommentRepository_GetCommentsOfJoke_Call {
	return &CommentRepository_GetCommentsOfJoke_Call{Call: _e.mock.On("GetCommentsOfJoke", c, jokeID, params)}
}

func (_c *CommentRepository_GetCommentsOfJoke_Call) Run(run func(c context.Context, jokeID int, params *domain.SelectParams)) *CommentRepository_GetCommentsOfJoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(*domain.SelectParams))
	})
	return _c
}

func (_c *CommentRepository_GetCommentsOfJoke_Call) Return(_a0 domain.Comments, _a1 error) *CommentRepository_GetCommentsOfJoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepository_GetCommentsOfJoke_Call) RunAndReturn(run func(context.Context, int, *domain.SelectParams) (domain.Comments, error)) *CommentRepository_GetCommentsOfJoke_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsOfUser provides a mock function with given fields: c, username, params
func (_m *CommentRepository) GetCommentsOfUser(c context.Context, username string, params *domain.SelectParams) (domain.Comments, error) {
	ret := _m.Called(c, username, params)

	var r0 domain.Comments
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SelectParams) (domain.Comments, error)); ok {
		return rf(c, username, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SelectParams) domain.Comments); ok {
		r0 = rf(c, username, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Comments)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.SelectParams) error); ok {
		r1 = rf(c, username, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_GetCommentsOfUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsOfUser'
type CommentRepository_GetCommentsOfUser_Call struct {
	*mock.Call
}

// GetCommentsOfUser is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - params *domain.SelectParams
func (_e *CommentRepository_Expecter) GetCommentsOfUser(c interface{}, username interface{}, params interface{}) *CommentRepository_GetCommentsOfUser_Call {
	return &CommentRepository_GetCommentsOfUser_Call{Call: _e.mock.On("GetCommentsOfUser", c, username, params)}
}

func (_c *CommentRepository_GetCommentsOfUser_Call) Run(run func(c context.Context, username string, params *domain.SelectParams)) *CommentRepository_GetCommentsOfUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.SelectParams))
	})
	return _c
}

func (_c *CommentRepository_GetCommentsOfUser_Call) Return(_a0 domain.Comments, _a1 error) *CommentRepository_GetCommentsOfUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentRepository_GetCommentsOfUser_Call) RunAndReturn(run func(context.Context, string, *domain.SelectParams) (domain.Comments, error)) *CommentRepository_GetCommentsOfUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCommentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepository(t mockConstructorTestingTNewCommentRepository) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
