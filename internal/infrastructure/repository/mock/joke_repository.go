// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	context "context"

	domain "github.com/abc-valera/flugo-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// JokeRepository is an autogenerated mock type for the JokeRepository type
type JokeRepository struct {
	mock.Mock
}

type JokeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *JokeRepository) EXPECT() *JokeRepository_Expecter {
	return &JokeRepository_Expecter{mock: &_m.Mock}
}

// CreateJoke provides a mock function with given fields: c, joke
func (_m *JokeRepository) CreateJoke(c context.Context, joke *domain.Joke) error {
	ret := _m.Called(c, joke)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Joke) error); ok {
		r0 = rf(c, joke)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JokeRepository_CreateJoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJoke'
type JokeRepository_CreateJoke_Call struct {
	*mock.Call
}

// CreateJoke is a helper method to define mock.On call
//   - c context.Context
//   - joke *domain.Joke
func (_e *JokeRepository_Expecter) CreateJoke(c interface{}, joke interface{}) *JokeRepository_CreateJoke_Call {
	return &JokeRepository_CreateJoke_Call{Call: _e.mock.On("CreateJoke", c, joke)}
}

func (_c *JokeRepository_CreateJoke_Call) Run(run func(c context.Context, joke *domain.Joke)) *JokeRepository_CreateJoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Joke))
	})
	return _c
}

func (_c *JokeRepository_CreateJoke_Call) Return(_a0 error) *JokeRepository_CreateJoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JokeRepository_CreateJoke_Call) RunAndReturn(run func(context.Context, *domain.Joke) error) *JokeRepository_CreateJoke_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJoke provides a mock function with given fields: c, id
func (_m *JokeRepository) DeleteJoke(c context.Context, id int) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JokeRepository_DeleteJoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJoke'
type JokeRepository_DeleteJoke_Call struct {
	*mock.Call
}

// DeleteJoke is a helper method to define mock.On call
//   - c context.Context
//   - id int
func (_e *JokeRepository_Expecter) DeleteJoke(c interface{}, id interface{}) *JokeRepository_DeleteJoke_Call {
	return &JokeRepository_DeleteJoke_Call{Call: _e.mock.On("DeleteJoke", c, id)}
}

func (_c *JokeRepository_DeleteJoke_Call) Run(run func(c context.Context, id int)) *JokeRepository_DeleteJoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *JokeRepository_DeleteJoke_Call) Return(_a0 error) *JokeRepository_DeleteJoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JokeRepository_DeleteJoke_Call) RunAndReturn(run func(context.Context, int) error) *JokeRepository_DeleteJoke_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJokesByAuthor provides a mock function with given fields: c, username
func (_m *JokeRepository) DeleteJokesByAuthor(c context.Context, username string) error {
	ret := _m.Called(c, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JokeRepository_DeleteJokesByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJokesByAuthor'
type JokeRepository_DeleteJokesByAuthor_Call struct {
	*mock.Call
}

// DeleteJokesByAuthor is a helper method to define mock.On call
//   - c context.Context
//   - username string
func (_e *JokeRepository_Expecter) DeleteJokesByAuthor(c interface{}, username interface{}) *JokeRepository_DeleteJokesByAuthor_Call {
	return &JokeRepository_DeleteJokesByAuthor_Call{Call: _e.mock.On("DeleteJokesByAuthor", c, username)}
}

func (_c *JokeRepository_DeleteJokesByAuthor_Call) Run(run func(c context.Context, username string)) *JokeRepository_DeleteJokesByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JokeRepository_DeleteJokesByAuthor_Call) Return(_a0 error) *JokeRepository_DeleteJokesByAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JokeRepository_DeleteJokesByAuthor_Call) RunAndReturn(run func(context.Context, string) error) *JokeRepository_DeleteJokesByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetJokeByID provides a mock function with given fields: c, id
func (_m *JokeRepository) GetJokeByID(c context.Context, id int) (*domain.Joke, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Joke
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Joke, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Joke); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Joke)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JokeRepository_GetJokeByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJokeByID'
type JokeRepository_GetJokeByID_Call struct {
	*mock.Call
}

// GetJokeByID is a helper method to define mock.On call
//   - c context.Context
//   - id int
func (_e *JokeRepository_Expecter) GetJokeByID(c interface{}, id interface{}) *JokeRepository_GetJokeByID_Call {
	return &JokeRepository_GetJokeByID_Call{Call: _e.mock.On("GetJokeByID", c, id)}
}

func (_c *JokeRepository_GetJokeByID_Call) Run(run func(c context.Context, id int)) *JokeRepository_GetJokeByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *JokeRepository_GetJokeByID_Call) Return(_a0 *domain.Joke, _a1 error) *JokeRepository_GetJokeByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JokeRepository_GetJokeByID_Call) RunAndReturn(run func(context.Context, int) (*domain.Joke, error)) *JokeRepository_GetJokeByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJokes provides a mock function with given fields: c, params
func (_m *JokeRepository) GetJokes(c context.Context, params *domain.SelectParams) (domain.Jokes, error) {
	ret := _m.Called(c, params)

	var r0 domain.Jokes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SelectParams) (domain.Jokes, error)); ok {
		return rf(c, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.SelectParams) domain.Jokes); ok {
		r0 = rf(c, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Jokes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.SelectParams) error); ok {
		r1 = rf(c, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JokeRepository_GetJokes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJokes'
type JokeRepository_GetJokes_Call struct {
	*mock.Call
}

// GetJokes is a helper method to define mock.On call
//   - c context.Context
//   - params *domain.SelectParams
func (_e *JokeRepository_Expecter) GetJokes(c interface{}, params interface{}) *JokeRepository_GetJokes_Call {
	return &JokeRepository_GetJokes_Call{Call: _e.mock.On("GetJokes", c, params)}
}

func (_c *JokeRepository_GetJokes_Call) Run(run func(c context.Context, params *domain.SelectParams)) *JokeRepository_GetJokes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.SelectParams))
	})
	return _c
}

func (_c *JokeRepository_GetJokes_Call) Return(_a0 domain.Jokes, _a1 error) *JokeRepository_GetJokes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JokeRepository_GetJokes_Call) RunAndReturn(run func(context.Context, *domain.SelectParams) (domain.Jokes, error)) *JokeRepository_GetJokes_Call {
	_c.Call.Return(run)
	return _c
}

// GetJokesByAuthor provides a mock function with given fields: c, username, params
func (_m *JokeRepository) GetJokesByAuthor(c context.Context, username string, params *domain.SelectParams) (domain.Jokes, error) {
	ret := _m.Called(c, username, params)

	var r0 domain.Jokes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SelectParams) (domain.Jokes, error)); ok {
		return rf(c, username, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.SelectParams) domain.Jokes); ok {
		r0 = rf(c, username, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Jokes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.SelectParams) error); ok {
		r1 = rf(c, username, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JokeRepository_GetJokesByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJokesByAuthor'
type JokeRepository_GetJokesByAuthor_Call struct {
	*mock.Call
}

// GetJokesByAuthor is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - params *domain.SelectParams
func (_e *JokeRepository_Expecter) GetJokesByAuthor(c interface{}, username interface{}, params interface{}) *JokeRepository_GetJokesByAuthor_Call {
	return &JokeRepository_GetJokesByAuthor_Call{Call: _e.mock.On("GetJokesByAuthor", c, username, params)}
}

func (_c *JokeRepository_GetJokesByAuthor_Call) Run(run func(c context.Context, username string, params *domain.SelectParams)) *JokeRepository_GetJokesByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*domain.SelectParams))
	})
	return _c
}

func (_c *JokeRepository_GetJokesByAuthor_Call) Return(_a0 domain.Jokes, _a1 error) *JokeRepository_GetJokesByAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JokeRepository_GetJokesByAuthor_Call) RunAndReturn(run func(context.Context, string, *domain.SelectParams) (domain.Jokes, error)) *JokeRepository_GetJokesByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJokeExplanation provides a mock function with given fields: c, id, explanation
func (_m *JokeRepository) UpdateJokeExplanation(c context.Context, id int, explanation string) error {
	ret := _m.Called(c, id, explanation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(c, id, explanation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JokeRepository_UpdateJokeExplanation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJokeExplanation'
type JokeRepository_UpdateJokeExplanation_Call struct {
	*mock.Call
}

// UpdateJokeExplanation is a helper method to define mock.On call
//   - c context.Context
//   - id int
//   - explanation string
func (_e *JokeRepository_Expecter) UpdateJokeExplanation(c interface{}, id interface{}, explanation interface{}) *JokeRepository_UpdateJokeExplanation_Call {
	return &JokeRepository_UpdateJokeExplanation_Call{Call: _e.mock.On("UpdateJokeExplanation", c, id, explanation)}
}

func (_c *JokeRepository_UpdateJokeExplanation_Call) Run(run func(c context.Context, id int, explanation string)) *JokeRepository_UpdateJokeExplanation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *JokeRepository_UpdateJokeExplanation_Call) Return(_a0 error) *JokeRepository_UpdateJokeExplanation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JokeRepository_UpdateJokeExplanation_Call) RunAndReturn(run func(context.Context, int, string) error) *JokeRepository_UpdateJokeExplanation_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewJokeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewJokeRepository creates a new instance of JokeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJokeRepository(t mockConstructorTestingTNewJokeRepository) *JokeRepository {
	mock := &JokeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
